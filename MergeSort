/*
 *非递归
 */
void MergeSort(int a[],int n)
{
	int *b=new int[n];
	int s=1;
	while(s<n)
	{
		MergePass(a,b,s,n);
		s+=s;
		MergePass(b,a,s,n);
		s+=s;
	}
}
void MergePass(int x[],int y[],int s,int n)
{
	int i=0;
	while(i<=n-2*s)
	{
		Merge(x,y,i,i+s-1,i+2*s-1);
		i=i+2*s;
	}
	if(i+s<n)
		Merge(x,y,i,i+s-1,n-1);
	else
		for(int j=i;j<=n-1;j++)
			y[j]=x[j];
}
void Merge(int c[],int d[],int l,int m,int r)
{
	int i=l,j=m+1,k=l;
	while((i<=m)&&(j<=r)){
		if(c[i]<=c[j])
		 d[k++]=c[i++];
		else
		 d[k++]=c[j++];
	}	
	if(i>m){
		for(int q=j;q<=r;q++)
			d[k++]=c[q];
	}	
	else{
		for(int q=i;q<=m;q++)
			d[k++]=c[q];
	}
}
/*
 *递归
 */
void MergeSort(int a[],int left,int right)
{
	if(left<right){
		int i=(left+right)/2;
		MergeSort(a,left,i);
		MergeSort(a,i+1,right);
		Merge(a,left,i,right);
	}
}

void Merge(int a[], int left, int m, int right)
{
	int l=m-left+1,r=right-m,i;
	int L[l+1],R[r+1];
	for(i=0;i<l;i++)
	{
		L[i]=a[left+i];
	}
	for(i=0;i<r;i++)
	{
		R[i]=a[m+i+1];
	}
	L[l]=32767;
	R[r]=32767;
	l=0;
	r=0;
	for(i=0;i<right-left+1;i++)
	{
		if(L[l]<R[r])
		{
			a[left+i]=L[l];
			l++;
		}
		else
		{
			a[left+i]=R[r];
			r++;
		}
	}
}
